<?xml version="1.0" encoding="UTF-8" ?>
<section xml:id="sec_proj_fractals">
  <title>Project: Fractals via Iterated Function Systems</title>
  <p>
    In this project we will see how to use linear transformations to create iterated functions systems to generate fractals.
    We illustrate the idea with the Sierpinski triangle,
    an approximate picture of which is shown at left in <xref ref="F_Striangle"></xref>.
  </p>

  <figure xml:id="F_Striangle">
    <caption>Left: An approximation of the Sierpinski triangle. Right: A triangle.</caption>
    <sidebyside>
      <image width="30%" source="8_a_Striangle_9"/>
      <image width="30%" source="8_a_triangle"/>
    </sidebyside>
  </figure>

  <p>
    To make this figure,
    we need to identify linear transformations that can be put together to produce the Sierpinski triangle.
  </p>

  <project xml:id="act_IFS_1">
    <introduction>
    <p>
      Let <m>\vv_1 = [0 \ 0]^{\tr}</m>,
      <m>\vv_2 = [1 \ 0]^{\tr}</m>,
      and <m>\vv_3 = \left[ \frac{1}{2} \ \frac{\sqrt{3}}{4}\right]^{\tr}</m> be three vectors in the plane whose endpoints form the vertices of a triangle <m>P_0</m> as shown at right in <xref ref="F_Striangle"></xref>.
      Let <m>T : \R^2 \to \R^2</m> be the linear transformation defined by <m>T(\vx) = A \vx</m>,
      where <m>A = \frac{1}{2} I_2 = \frac{1}{2} \left[ \begin{array}{cc} 1\amp 0 \\ 0\amp 1 \end{array} \right]</m>.
    </p>
    </introduction>
      <task>
        <statement>
          <p>
            What are <m>T(\vv_1)</m>, <m>T(\vv_2)</m>, and <m>T(\vv_3)</m>?
            Draw a picture of the figure <m>T(P_0)</m> whose vertices are the endpoint of these three vectors.
            How is <m>T(P_0)</m> related to <m>P_0</m>?
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            Since the transformation <m>T</m> shrinks objects, we call <m>T</m>
            (or <m>A</m>)
            a <term>contraction mapping</term>).
            Notice that when we apply <m>T</m> to <m>P_0</m> it creates a smaller version of <m>P_0</m>.
            The next step is to use <m>T</m> to make three smaller copies of <m>P_0</m>,
            and then translate these copies to the vertices of <m>P_0</m>.
            A translation can be performed by adding a vector to <m>T(P_0)</m>.
            Find <m>C_1</m> so that <m>C_1(P_0)</m> is a copy of <m>P_0</m> half the size and translated so that <m>C_1(\vv_1) = \vv_1</m>.
            Then find <m>C_2</m> so that
            <m>C_2(P_0)</m> is a copy of <m>P_0</m> half the size and translated so that <m>C_2(\vv_2) = \vv_2</m>.
            Finally, find <m>C_3</m> so that
            <m>C_3(P_0)</m> is a copy of <m>P_0</m> half the size and translated so that <m>C_3(\vv_3) = \vv_3</m>.
            Draw pictures of each to illustrate.
          </p>
        </statement>
      </task>
    
  </project>

  <p>
    <xref ref="act_IFS_1"></xref>
    contains the information we need to create an iterated function system to produce the Sierpinski triangle.
    One more step should help us understand the general process.
  </p>

  <project xml:id="act_IFS_2">
    <introduction>
    <p>
      Using the results of <xref ref="act_IFS_1"></xref>,
      define <m>P_{1,i}</m> to be <m>C_i(P_0)</m> for each <m>i</m>.
      That is, <m>P_{1,1} = C_1(P_0)</m>,
      <m>P_{1,2} = C_2(P_0)</m>, and <m>P_{1,3} = C_3(P_0)</m>.
      So <m>P_{1,i}</m> is a triangle half the size of the original translated to the <m>i</m>th vertex of the original.
      Let <m>P_1 = \bigcup_{i=1}^3 P_{1,i}</m>.
      That is, <m>P_1</m> is the union of the shaded triangles in <xref ref="F_IFS_2"></xref>.
    </p>
    <figure xml:id="F_IFS_2">
      <caption><m>C_1(P_0)</m>, <m>C_2(P_0)</m>, and <m>C_3(P_0)</m>.</caption>
      <image width="30%" source="8_a_IFS_2"/>
    </figure>
    </introduction>
    <task>
      <statement>
        <p>
          Apply <m>C_1</m> from <xref ref="act_IFS_1"></xref> to <m>P_1</m>.
          What is the resulting figure?
          Draw a picture to illustrate.
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Apply <m>C_2</m> from <xref ref="act_IFS_1"></xref> to <m>P_1</m>.
          What is the resulting figure?
          Draw a picture to illustrate.
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Apply <m>C_3</m> from <xref ref="act_IFS_1"></xref> to <m>P_1</m>.
          What is the resulting figure?
          Draw a picture to illustrate.
        </p>
      </statement>
    </task>
  </project>

  <p>
    The procedures from <xref ref="act_IFS_1"></xref>
    and <xref ref="act_IFS_2"></xref> can be continued,
    replacing <m>P_0</m> with <m>P_1</m>,
    then <m>P_2</m>, and so on.
    In other words,
    for <m>i</m> = 1, 2, and 3, let <m>P_{2,i} = C_i(P_1)</m>.
    Then let <m>P_2 = \bigcup_{i=1}^3 P_{2,i}</m>.
    A picture of <m>P_2</m> is shown at left in <xref ref="F_Striangle_2"></xref>.
    We can continue this procedure,
    each time replacing <m>P_{j-1}</m> with <m>P_j</m>.
    A picture of <m>P_9</m> is shown at right in <xref ref="F_Striangle_2"></xref>.
  </p>

  <figure xml:id="F_Striangle_2">
    <caption>Left: <m>P_2</m>. Right: <m>P_9</m>.</caption>
    <sidebyside>
    <image width="30%" source="8_a_Striangle_2"/>   
    <image width="30%" source="8_a_Striangle_9"/>
    </sidebyside>
  </figure>

  <p>
    If we continue this process, taking the limit as <m>i</m> approaches infinity,
    the resulting sequence of sets converges to a fixed set,
    in this case the famous Sierpinski triangle.
    So the picture of <m>P_9</m> in <xref ref="F_Striangle_2"></xref>
    is a close approximation of the Sierpinski triangle.
    This algorithm for building the Sierpinski triangle is called the
    <term>deterministic algorithm</term>.
    A Sage cell to illustrate this algorithm for producing approximations to the Sierpinski triangle can be found at <url href="http://faculty.gvsu.edu/schlicks/STriangle_Sage.html" visual="faculty.gvsu.edu/schlicks/STriangle_Sage.html"/>.
  </p>
  <p>
  <idx><h>iterated function system</h></idx>
  <idx><h>attractor</h></idx>
    In general, an iterated function system (IFS) is a finite set
    <m>\{f_1, f_2, \ldots,
    f_m\}</m> of contraction mappings from <m>\R^2</m> to <m>\R^2</m>.
    If we start with a set <m>S_0</m>,
    and let <m>S_1 = \bigcup f_i(S_0)</m>,
    <m>S_2 = \bigcup f_i(S_1)</m>, and so on, then in
    <q>nice</q>
    cases (we won't concern ourselves with what
    <q>nice</q>
    means here), the sequence <m>S_0</m>, <m>S_1</m>, <m>S_2</m>,
    <m>\ldots</m> converges in some sense to a fixed set.
    That fixed set is called the <term>attractor</term>
    of the iterated function system.
    It is that attractor that is the fractal.
    It is fascinating to note that our starting set does not matter,
    the same attractor is obtained no matter which set we use as <m>S_0</m>.
  </p>
  <p>
  <idx><h>self-similar set</h></idx>
    One aspect of a fractal is that fractals are self-similar,
    that is they are made up of constituent pieces that look just like the whole.
    More specifically,
    a subset <m>S</m> of <m>\R^2</m> is <term>self-similar</term>
    if it can be expressed in the form
    <me>
      S = S_1 \cup S_2 \cup \cdots \cup S_k
    </me>
    for non-overlapping sets <m>S_1</m>,
    <m>S_2</m>, <m>\ldots</m>, <m>S_k</m>,
    each of which is congruent to <m>S</m> by the same scaling factor.
    So, for example, the Sierpinski triangle is self-similar,
    made up of three copies of the whole,
    each contracted by a factor of <m>2</m>.
  </p>
  <p>
    If we have an IFS, then we can determine the attractor by drawing the sequence of sets that the IFS generates.
    A more interesting problem is,
    given a self-similar figure,
    whether we can construct an IFS that has that figure as its attractor.
  </p>

  <project xml:id="IFS_carpet">
    <introduction>
    <p>
      A picture of an emerging Sierpinski carpet is shown at left in <xref ref="F_Scarpet"></xref>.
      A Sage cell to illustrate this algorithm for producing approximations to the Sierpinski carpet can be found at <url href="http://faculty.gvsu.edu/schlicks/SCarpet_Sage.html" visual="faculty.gvsu.edu/schlicks/SCarpet_Sage.html"/>. In this activity we will see how to find an iterated function system that will generate this fractal.
    </p>
    <figure xml:id="F_Scarpet">
      <caption>A Sierpinski carpet.</caption>
      <image width="30%" source="8_a_Scarpet_6"/>
    </figure>
    </introduction>
    <task>
      <statement>
        <p>
          To create an IFS to generate this fractal,
          we need to understand how many self-similar pieces make up this figure.
          Use the image at right in <xref ref="F_Scarpet"></xref>
          to determine how many pieces we need.
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          For each of the self-similar pieces identified in part (a),
          find a linear transformation and a translation that maps the entire figure to the self-similar piece.
          
        </p>
      </statement>
      <hint>
        <p>
          You could assume that the carpet is embedded in the unit square.
        </p>
      </hint>
    </task>
    <task>
      <statement>
        <p>
          Test your IFS to make sure that it actually generates the Sierpinski carpet.
          There are many websites that allow you to do this,
          one of which is <url href="http://cs.lmu.edu/~ray/notes/ifs/" visual="cs.lmu.edu/~ray/notes/ifs/"/>. In this program,
          the mapping <m>f</m> defined by
          <me>
            f(\vx) = \left[ \begin{array}{cc} a\amp b\\c\amp d \end{array}  \right] \vx + \left[ \begin{array}{c} e\\f \end{array} \ \right]
          </me>
          is represented as the string
          <me>
            a \ b \ c \ d \ e \ f
          </me>.
          Most programs generally use a different algorithm to create the attractor,
          plotting points instead of sets.
          In this algorithm,
          each contraction mapping is assigned a probability as well
          (the larger parts of the figure are usually given higher probabilities),
          so you will enter each contraction mapping in the form
          <me>
            a \ b \ c \ d \ e \ f \ p
          </me>
          where <m>p</m> is the probability attached to that contraction mapping.
          As an example, the IFS code for the Sierpinski triangle is
          <me>
            \begin{array}{ccccccc} 0.5  \amp 0  \amp 0  \amp 0.5  \amp 0  \amp 0    \amp 0.33 \\ 0.5  \amp 0  \amp 0  \amp 0.5  \amp 1  \amp 0    \amp 0.33 \\ 0.5  \amp 0  \amp 0  \amp 0.5  \amp 0.5  \amp 0.43  \amp 0.33 \end{array}
          </me>
        </p>
      </statement>
    </task>
  </project>

  <p>
    The contraction mappings we have used so far only involve contractions and translations.
    But we do not have to restrict ourselves to just these types of contraction mappings.
  </p>

  <project xml:id="act_Fractal_reflection">
    <statement>
    <p>
      Consider the fractal represented in <xref ref="F_Fractal_reflection"></xref>.
      Find an IFS that generates this fractal.
      Explain your reasoning.
    </p>
    
    <p>
      Check with a fractal generator to ensure that you have an appropriate IFS.
    </p>
    <figure xml:id="F_Fractal_reflection">
      <caption>A fractal.</caption>
      <image width="30%" source="8_a_Reflection_fractal"/>
    </figure>
    </statement>
    <hint>
      <p>
        Two reflections are involved.
      </p>
    </hint>
  </project>

  <p>
    We conclude our construction of fractals with one more example.
    The contraction mappings in iterated function can also involve rotations.
  </p>

  <project xml:id="act_Fractal_dragon">
    <statement>
    <p>
      Consider the L&#xe9;vy Dragon fractal shown at left in <xref ref="F_Fractal_rotation"></xref>.
      Find an IFS that generates this fractal.
      Explain your reasoning.
    </p>
    
    <p>
      Check with a fractal generator to ensure that you have an appropriate IFS.
    </p>
    <figure xml:id="F_Fractal_rotation">
      <caption>The L&#xe9;vy Dragon.</caption>
      <sidebyside>
      <image width="30%" source="8_a_Rotation_fractal"/>   
      <image width="30%" source="8_a_Rotation_triangles"/>
      </sidebyside>
    </figure>
    </statement>
    <hint>
      <p>
        Two rotations are involved <mdash/> think of the fractal as contained in a blue triangle as shown at right in <xref ref="F_Fractal_rotation"></xref>.
      </p>
    </hint>
  </project>
   
  <p>
    We end this project with a short discussion of fractal dimension.
    The fractals we have seen are very strange in many ways,
    one of which is dimension.
    We have studied the dimensions of subspaces of <m>R^n</m> <mdash/> each subspace has an integer dimension that is determined by the number of elements in a basis.
    Fractals also have a dimension,
    but the dimension of a fractal is generally not an integer.
    To try to understand fractal dimension,
    notice that a line segment is self-similar.
    We can break up a line segment into 2 non-overlapping line segments of the same length,
    or 3, or 4, or any number of non-overlapping segments of the same length.
    A square is slightly different.
    We can partition a square into 4 non-overlapping squares,
    or 9 non-overlapping squares,
    or <m>n^2</m> non-overlapping squares for any positive integer <m>n</m> as shown in <xref ref="F_Squares"></xref>.
  </p>
  <figure xml:id="F_Squares">
    <caption>Self-similar squares.</caption>
    <image width="50%" source="8_a_similar"/>
  </figure>
  <p>
    Similarly, we can break up a cube into <m>n^3</m> non-overlapping congruent cubes.
    A line segment lies in a one-dimensional space,
    a square in a two-dimensional space,
    and a cube in the three-dimensional space.
    Notice that these dimensions correspond to the exponent of the number of self-similar pieces with scaling <m>n</m> into which we can partition the object.
    We can use this idea of dimension in a way that we can apply to fractals.
    Let <m>d(\text{ object } )</m> be the dimension of the object.
    We can partition a square into <m>n^2</m> non-overlapping squares, so
    <me>
      d(\text{ square } ) = 2 = 2\frac{\ln(n)}{\ln(n)} = \frac{\ln(n^2)}{\ln(n)} = \frac{\ln(\text{ number of self-similar pieces } )}{\ln(\text{ scaling factor } )}
    </me>.
  </p>
  <p>
    Similarly, for the cube we have
    <me>
      d(\text{ cube } ) = 3 = 3\frac{\ln(n)}{\ln(n)} = \frac{\ln(n^3)}{\ln(n)} = \frac{\ln(\text{ number of self-similar pieces } )}{\ln(\text{ scaling factor } )}
    </me>.
  </p>
  <p>
    We can then take this as our definition of the dimension of a self-similar object,
    when the scaling factors are all the same
    (the fern fractal in <xref ref="F_Fern"></xref>
    is an example of a fractal generated by an iterated function system in which the scaling factors are not all the same).
  </p>

  <definition>
  <idx><h>Hausdorff dimension</h></idx>
    <statement>
      <p>
        The <term>fractal</term> or <term>Hausdorff</term>
        dimension <m>h</m> of a self-similar set <m>S</m> is
        <me>
          h(S) = \frac{\ln(\text{ number of self-similar pieces } )}{\ln(\text{ scaling factor } )}
        </me>.
      </p>
    </statement>
  </definition>

  <project xml:id="act_IFS_dimension">
    <statement>
    <p>
      Find the fractal dimensions of the Sierpinski triangle and the Sierpinski carpet.
      These are well-known and you can look them up to check your result.
      Then find the fractal dimension of the fractal with IFS
      <me>
        \begin{array}{ccccccc} 0.38 \amp 0 \amp 0 \amp 0.38 \amp -0.59   \amp 0.81  \amp 0.2 \\ 0.38 \amp 0 \amp 0 \amp 0.38 \amp -0.95   \amp -0.31   \amp 0.2 \\ 0.38 \amp 0 \amp 0 \amp 0.38 \amp 0   \amp -1     \amp 0.2 \\ 0.38 \amp 0 \amp 0 \amp 0.38 \amp 0.95   \amp -0.31   \amp 0.2 \\ 0.38 \amp 0 \amp 0 \amp 0.38 \amp 0.59   \amp 0.81   \amp 0.2 \end{array}
      </me>.
    </p>
    <p>
      You might want to draw this fractal using an online generator.
    </p>
    </statement>
  </project>
</section>