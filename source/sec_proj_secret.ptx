<?xml version="1.0" encoding="UTF-8" ?>
<section xml:id="sec_proj_secret">
  <title>Project: Shamir's Secret Sharing and Lagrange Polynomials</title>
  <p>
    Shamir's Secret Sharing is a secret sharing algorithm developed by the Israeli cryptographer Adi Shamir,
    who also contributed to the invention of RSA algorithm.
    The idea is to develop shares related to a secret code that can be distributed in such a way that the secret code can only be discovered if a fixed number of shareholders combine their information.
  </p>
  <p>
    The general algorithm for Shamir's Secret Sharing works by creating a polynomial with the secret code as one coefficient and random remaining coefficients.
    More specifically, to create a <m>(k,n)</m> threshold scheme,
    let <m>a_0</m> be the secret code.
    Then choose at random <m>k-1</m> positive integers <m>a_1</m>,
    <m>a_2</m>,
    <m>\ldots</m>, <m>a_{k-1}</m> and create the polynomial
    <me>
      p(t) = a_0 + a_1t + a_2 t^2 + \cdots + a_{k-1}t^{k-1}
    </me>,
    where <m>a_0</m> is the secret.
    Evaluate <m>p(t)</m> at <m>n</m> different inputs <m>t_1</m>,
    <m>t_2</m>, <m>\ldots</m>,
    <m>t_n</m> to create <m>n</m> points <m>P_1 = (t_1,p(t_1))</m>,
    <m>P_2 = (t_2,p(t_2))</m>, <m>\ldots</m>,
    <m>P_n = (t_n, p(t_n))</m>.
    Each participant is given one of these points.
    Since any collection of <m>k</m> distinct points on the graph of <m>p(t)</m> uniquely determines <m>p(t)</m>,
    any combination of <m>k</m> of the participants could reconstruct <m>p(t)</m>.
    The secret is then <m>p(0)</m>.
    (Note that, except under very restrictive circumstances,
    there is no polynomial of degree less than <m>k</m> that passes through the given <m>k</m> points,
    so it would be impossible for fewer than <m>k</m> participants to reconstruct the message.)
  </p>
  <p>
    As an example, let our secret code be <m>a_0=1234</m>.
    Let <m>n = 6</m> and <m>k = 3</m>.
    Choose two positive integers at random,
    say <m>a_1 = 100</m> and <m>a_2 = 38</m>.
    Then
    <men xml:id="eq_SSS_polynomial">
      p(t) = 1234 + 100t + 38t^2
    </men>.
  </p>
  <p>
    Now we construct <m>6</m> points by selecting <m>6</m> positive integers,
    say <m>t_1 = 1</m>, <m>t_2 = 2</m>, <m>t_3 = 3</m>,
    <m>t_4 = 4</m>, <m>t_5 = 5</m>, and <m>t_6 = 6</m>.
    Evaluating <m>p(t)</m> at <m>t=1</m> through <m>t=6</m> gives us the points <m>P_1 = (1,1372)</m>,
    <m>P_2 = (2,1586)</m>, <m>P_3 = (3,1876)</m>,
    <m>P_4 = (4,2242)</m>, <m>P_5 = (5,2684)</m>,
    and <m>P_6 = (6,3202)</m>.
    Our goal is to find the polynomial that passes through any three of these points.
    The next activity will show us how to find this polynomial.
  </p>
  <activity xml:id="act_SSS_1">
    <p>
      It will be instructive to work in the most general setting.
      We restrict ourselves to the degree <m>2</m> case for now.
      Given three scalars <m>t_1</m>, <m>t_2</m>,
      and <m>t_3</m>, define <m>L: \pol_2 \to \R^3</m> by
      <me>
        L(q(t)) = \left[ \begin{array}{c} q(t_1) \\  q(t_2) \\ q(t_3) \end{array}  \right]
      </me>.
      <ul>
        <li>
          <p>
            Show that <m>L</m> is a linear transformation.
          </p>
        </li>
        <li>
          <p>
            Find the matrix for <m>L</m> with respect to the standard bases
            <m>\CB = \{\ve_1, \ve_2, \ve_3\}</m> for <m>\R^3</m> and <m>\CS = \{1,t,t^2\}</m> for <m>\pol_2</m>.
          </p>
        </li>
        <li>
          <p>
            Recall that the matrix <m>[L]_{\CS}^{\CB}</m> has the property that
            <m>[L(q(t))]_{\CB} = [L]_{\CS}^{\CB}[q(t)]_{\CS}</m> for any <m>q(t)</m> in <m>\pol_2</m>.
            So <m>L</m> is one-to-one if and only if the matrix transformation defined by <m>[L]_{\CS}^{\CB}</m> is one-to-one.
            Use this idea to show that <m>L</m> is one-to-one if and only if <m>t_1</m>,
            <m>t_2</m>,
            and <m>t_3</m> are all different.
            Use appropriate technology where needed.
          </p>
        </li>
        <li>
          <p>
            Given three points <m>(t_1,y_1)</m>,  <m>(t_2,y_2)</m>,
            and <m>(t_3,y_3)</m> with distinct <m>t_1</m>,
            <m>t_2</m>, and <m>t_3</m>,
            our objective is to find a polynomial <m>p(t)</m> such that
            <m>p(t_i) = y_i</m> for <m>i</m> from <m>1</m> to <m>3</m>.
            We proceed by finding quadratic polynomials <m>\ell_1(t)</m>,
            <m>\ell_2(t)</m>,
            and <m>\ell_3(t)</m> so that <m>L(\ell_1(t)) =  \ve_1</m>,
            <m>L(\ell_2(t)) = \ve_2</m>, and <m>L(\ell_3(t)) = \ve_3</m>.
            Explain why, if <m>\ell_1(t)</m>, <m>\ell_2(t)</m>,
            and <m>\ell_3(t)</m> are quadratic polynomials so that <m>L(\ell_1(1)) =  \ve_1</m>,
            <m>L(\ell_2(t)) = \ve_2</m>,
            and <m>L(\ell_3(t)) = \ve_3</m>,
            and <m>t_1</m>, <m>t_2</m>,
            and <m>t_3</m> are all different,
            then the polynomial <m>p(t)</m> will satisfy
            <men xml:id="eq_Lagrange_2">
              p(t) = y_1 \ell_1(t) + y_2 \ell_2(t) + y_3 \ell_3(t)
            </men>.
          </p>
        </li>
      </ul>
    </p>
  </activity>
  <p>
    The polynomials <m>\ell_1(t)</m>, <m>\ell_2(t)</m>,
    and <m>\ell_3(t)</m> in Project <xref ref="act_SSS_1"></xref>
    are examples of <em>Lagrange polynomials</em>.
        <idx><h>Lagrange polynomials</h></idx>
    Project <xref ref="act_SSS_1"></xref>
    shows that fitting polynomials to given points can be accomplished easily using linear combinations of Lagrange polynomials.
    Now we want to better understand the general formulas for the Lagrange polynomials <m>\ell_i(t)</m>.
  </p>
  <activity xml:id="act_Lagrange_polynomials">
    <p>
      In this activity we see how to find the quadratic polynomials <m>\ell_1(t)</m>,
      <m>\ell_2(t)</m>,
      and <m>\ell_3(t)</m> so that <m>L(\ell_1(t)) =  \ve_1</m>,
      <m>L(\ell_2(t)) = \ve_2</m>, and <m>L(\ell_3(t)) = \ve_3</m>.
      Let <m>\CB = \{\ve_1, \ve_2, \ve_3\}</m> and
      <m>\CS = \{1,t,t^2\}</m> be the standard bases for <m>\R^3</m> and <m>\pol_2</m>,
      respectively.
      <ul>
        <li>
          <p>
            Explain why the problem of solving the equations <m>L(\ell_1(t)) =  \ve_1</m>,
            <m>L(\ell_2(t)) = \ve_2</m>,
            and <m>L(\ell_3(t)) = \ve_3</m> is equivalent to solving the equations
            <me>
              [L]_{\CS}^{\CB}[\ell_1(t)]_{\CS} = \ve_1, \  [L]_{\CS}^{\CB}[\ell_2(t)]_{\CS} =\ve_2, \ \text{ and }  \  [L]_{\CS}^{\CB}[\ell_3(t)]_{\CS} =\ve_3
            </me>.
          </p>
        </li>
        <li>
          <p>
            Explain why we can solve the equations
            <me>
              [L]_{\CS}^{\CB}[\ell_1(t)]_{\CS} = \ve_1, \ [L]_{\CS}^{\CB}[\ell_2(t)]_{\CS} = \ve_2, \ \text{ and }  \  [L]_{\CS}^{\CB}[\ell_3(t)]_{\CS}= \ve_3
            </me>
            all at once by solving the matrix equation
            <me>
              [L]_{\CS}^{\CB} \left[[\ell_1(t)]_{\CS} \ [\ell_2(t)]_{\CS} \ [\ell_3(t)]_{\CS} \right] =  I_3
            </me>.
            What does this tell us about the relationship between the matrix
            <m>\left[[\ell_1(t)]_{\CS} \ [\ell_2(t)]_{\CS} \ [\ell_3(t)]_{\CS} \right]</m> and <m>[L]_{\CS}^{\CB}</m>?
          </p>
        </li>
        <li>
          <p>
            Technology shows that
            <me>
              \left([L]_{\CS}^{\CB}\right)^{-1} = \left[  \begin{array}{ccc} \frac{t_2t_3}{(t_1-t_2)(t_1-t_3)} \amp  \frac{t_1t_3}{(t_2-t_1)(t_2-t_3)} \amp  \frac{t_1t_2}{(t_3-t_1)(t_3-t_2)}  \\  -\frac{t_2+t_3}{(t_1-t_2)(t_1-t_3)} \amp  -\frac{t_1+t_3}{(t_2-t_1)(t_2-t_3)} \amp  -\frac{t_1+t_2}{(t_3-t_1)(t_3-t_2)} \\  \frac{1}{(t_1-t_2)(t_1-t_3)} \amp  \frac{1}{(t_2-t_1)(t_2-t_3)} \amp  \frac{1}{(t_3-t_1)(t_3-t_2)} \end{array}  \right]
            </me>.
            Use <m>\left([L]_{\CS}^{\CB}\right)^{-1}</m> to determine the coefficients of <m>\ell_1(t)</m>.
            Then apply some algebra to show that
            <me>
              \ell_1(t) =  \frac{(t-t_2)(t-t_3)}{(t_1-t_2)(t_1-t_3)}
            </me>.
          </p>
        </li>
        <li>
          <p>
            Find similar expressions for
            <m>\ell_2(t)</m> and <m>\ell_3(t)</m>.
            Explain why these three polynomials satisfy the required conditions that <m>L(\ell_1(t)) = \ve_1</m>,
            <m>L(\ell_2(t)) = \ve_2</m>, and <m>L(\ell_3(t)) = \ve_3</m>.
          </p>
        </li>
      </ul>
    </p>
  </activity>
  <p>
    Now we return to our secret code with <m>a_0 = 1234</m>.
  </p>
  <activity>
    <p>
      Pick any three of the points <m>P_1 = (1,1372)</m>,
      <m>P_2 = (2,1586)</m>, <m>P_3 = (3,1876)</m>,
      <m>P_4 = (4,2242)</m>, <m>P_5 = (5,2684)</m>,
      and <m>P_6 = (6,3202)</m>.
      Use the Lagrange polynomials <m>\ell_1(t)</m>, <m>\ell_2(t)</m>,
      and <m>\ell_3(t)</m> and <xref ref="eq_Lagrange_2"/> to find the polynomial whose graph contains the three chosen points.
      How does your polynomial compare to the polynomial <m>p(t)</m> in <xref ref="eq_SSS_polynomial"/>?
    </p>
  </activity>
  <p>
    The Shamir Secret Sharing algorithm depends on being able to find a unique polynomial <m>p(t)</m> that passes through the created points.
    We can understand this result with Lagrange polynomials.
  </p>
  <activity xml:id="act_SSS_Lagrange_general">
    <p>
      The process described in Project <xref ref="act_Lagrange_polynomials"></xref>
      for finding the Lagrange polynomials can be applied to any number of points.
      Let <m>(t_1,y_1)</m>, <m>(t_2,y_2)</m>, <m>(t_3,y_3)</m>,
      <m>\ldots</m>, <m>(t_n,y_n)</m>,
      and <m>(t_{n+1},y_{n+1})</m> be <m>n+1</m> points with distinct <m>t_i</m>.
      Generalizing the results of Project <xref ref="act_Lagrange_polynomials"></xref>,
      define <m>\ell_i(t)</m> for <m>i</m> from <m>1</m> to <m>n+1</m> as follows:
      <md>
        <mrow>\ell_i(t) \amp = \frac{(t-t_1)(t-t_2) \cdots (t-t_{i-1})(t-t_{i+1}) \cdots (t-t_n)(t-t_{n+1})}{(t_i-t_1)(t_i-t_2) \cdots (t_i-t_{i-1})(t_i-t_{i+1}) \cdots (t_i-t_n)(t_i-t_{n+1})}</mrow>
        <mrow>\amp =\prod_{j \neq i} \frac{t-t_j}{t_i-t_j}</mrow>
      </md>.
      <ul>
        <li>
          <p>
            Explain why <m>\ell_i(t)</m> is in <m>\pol_n</m> for each <m>i</m>.
          </p>
        </li>
        <li>
          <p>
            Explain why the polynomial <m>\ell_i(t)</m> satisfies
            <m>\ell_i(t_i) = 1</m> and <m>\ell_i(t_j) = 0</m> if <m>i \neq j</m>.
          </p>
        </li>
        <li>
          <p>
            Let <m>p(t) =  \sum_{i=1}^{n+1} y_i \ell_i(t)</m>.
            That is, <m>p(t)</m> is the polynomial
            <me>
              \sum_{i=1}^{n+1} y_i \frac{(t-t_1)(t-t_2) \dots (t-t_{i-1})(t-t_{i+1}) \dots (t-t_n)(t-t_{n+1})}{(t_i-t_1)(t_i-t_2) \dots (t_i-t_{i-1})(t_i-t_{i+1}) \dots (t_i-t_n)(t_i-t_{n+1})}
            </me>.
            Explain why <m>p(t)</m> is a polynomial in <m>\pol_n</m> whose graph contains the points
            <m>(t_i,y_i)</m> for <m>i</m> from <m>1</m> to <m>n+1</m>.
          </p>
        </li>
        <li>
          <p>
            The previous part demonstrates that there is always a polynomial in <m>\pol_n</m> whose graph contains the points <m>(t_1,y_1)</m>,
            <m>(t_2,y_2)</m>, <m>(t_3,y_3)</m>,
            <m>\ldots</m>, <m>(t_n,y_n)</m>,
            and <m>(t_{n+1},y_{n+1})</m> with distinct <m>t_i</m>.
            The last piece we need is to know that this polynomial is unique.
            Use the fact that a polynomial of degree <m>n</m> can have at most <m>n</m> roots to show that if <m>f(t)</m> and <m>g(t)</m> are two polynomials in <m>\pol_n</m> whose graphs contain the points <m>(t_1,y_1)</m>,
            <m>(t_2,y_2)</m>,
            <m>\ldots</m>, <m>(t_n,y_n)</m>,
            <m>(t_{n+1},y_{n+1})</m> with distinct values of <m>t_i</m>,
            then <m>f(t) = g(t)</m>.
            This completes Shamir's Secret Sharing algorithm.
          </p>
        </li>
      </ul>
    </p>
  </activity>
</section>