<?xml version="1.0" encoding="UTF-8" ?>
<section xml:id="sec_appl_secret">
  <title>Application: Secret Sharing Algorithms</title>
  <p>
    Suppose we have a secret that we want or need to share with several individuals.
    For example,
    a bank manager might want to share pieces of the code for the bank vault with several employees so that if the manager is not available,
    some subset of these employees could open the vault if they work together.
    This allows for a significant amount of security while still making the code available if needed.
    As another example, in order to keep passwords secure
    (as they can be hard to remember),
    a person could implement a secret sharing scheme.
    The person would generate a set of shares for a given password and store them in several different places.
    If the person forgets the password,
    it can be reconstructed by collecting some set of these shares.
    Since the shares can be stored in many different places,
    the password is relatively secure.
  </p>
  <p>
    The idea behind secret sharing algorithms is to break a secret into a number (<m>n</m>) of pieces and give each person one piece.
    A code is then created in such a way that any <m>k</m> individuals could combine their information and learn the secret,
    but no group of fewer than <m>k</m> individuals could.
    This is called a <m>(k,n)</m> threshold scheme.
    One secret sharing algorithm is Shamir's Secret Sharing, which,
    as we will see later in this section,
    involves Lagrange polynomials.
    In order to implement this algorithm,
    we will use matrices of linear transformations from polynomials spaces to <m>\R^n</m>.
  </p>
</section>